{"version":3,"sources":["skylark-domx-carets.js"],"names":[],"mappingsfile":"../skylark-domx-carets.js","sourcesContent":["define('skylark-domx-carets/carets',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\"\r\n], function(skylark, langx, noder, datax) {\r\n    \"use strict\";\r\n\r\n    var  _rCarriageReturn = /\\r/g;\r\n\r\n    function _normalizePos(input, pos) {\r\n        var norm = datax.val(input).replace(_rCarriageReturn, '');\r\n        var len = norm.length;\r\n\r\n        if (typeof(pos) === 'undefined') {\r\n            pos = len;\r\n        }\r\n\r\n        pos = Math.floor(pos);\r\n\r\n        // Negative index counts backward from the end of the input/textarea's value\r\n        if (pos < 0) {\r\n            pos = len + pos;\r\n        }\r\n\r\n        // Enforce boundaries\r\n        if (pos < 0) { pos = 0; }\r\n        if (pos > len) { pos = len; }\r\n\r\n        return pos;\r\n    };\r\n\r\n    /**\r\n     * @class\r\n     * @constructor\r\n     */\r\n    var Range = function(start, end, length, text) {\r\n        this.start = start || 0;\r\n        this.end = end || 0;\r\n        this.length = length || 0;\r\n        this.text = text || '';\r\n    };\r\n\r\n    Range.prototype.toString = function() {\r\n        return JSON.stringify(this, null, '    ');\r\n    };\r\n\r\n\r\n    /**\r\n     * Gets the position of the caret in the given input.\r\n     * @param {HTMLInputElement|HTMLTextAreaElement} input input or textarea element\r\n     * @returns {Number}\r\n     * @see http://stackoverflow.com/questions/263743/how-to-get-cursor-position-in-textarea/263796#263796\r\n     */\r\n    function getCaret(input) {\r\n        if (!input) {\r\n            return undefined;\r\n        }\r\n\r\n        return input.selectionStart;\r\n\r\n    };\r\n\r\n    /**\r\n     * Sets the position of the caret in the given input.\r\n     * @param {HTMLInputElement|HTMLTextAreaElement} input input or textarea element\r\n     * @param {Number} pos\r\n     * @see http://parentnode.org/javascript/working-with-the-cursor-position/\r\n     */\r\n     function setCaret(input, pos) {\r\n        input.focus();\r\n\r\n        pos = _normalizePos(input, pos);\r\n\r\n        input.setSelectionRange(pos, pos);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Inserts the specified text at the current caret position in the given input.\r\n     * @param {HTMLInputElement|HTMLTextAreaElement} input input or textarea element\r\n     * @param {String} text\r\n     */\r\n    function insertAtCaret(input, text) {\r\n        var curPos = _getCaret(input);\r\n\r\n        var oldValueNorm = datax.val(input).replace(_rCarriageReturn, '');\r\n\r\n        var newLength = +(curPos + text.length + (oldValueNorm.length - curPos));\r\n        var maxLength = +input.getAttribute('maxlength');\r\n\r\n        if(_hasAttr(input, 'maxlength') && newLength > maxLength) {\r\n            var delta = text.length - (newLength - maxLength);\r\n            text = text.substr(0, delta);\r\n        }\r\n\r\n        datax.val(input, oldValueNorm.substr(0, curPos) + text + oldValueNorm.substr(curPos));\r\n\r\n        setCaret(input, curPos + text.length);\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Gets the selected text range of the given input.\r\n     * @param {HTMLInputElement|HTMLTextAreaElement} input input or textarea element\r\n     * @returns {Range}\r\n     */\r\n    function getInputRange(input) {\r\n        if (!input) {\r\n            return undefined;\r\n        }\r\n\r\n         var range = new Range();\r\n\r\n        range.start = input.selectionStart;\r\n        range.end = input.selectionEnd;\r\n\r\n        var min = Math.min(range.start, range.end);\r\n        var max = Math.max(range.start, range.end);\r\n\r\n        range.length = max - min;\r\n        range.text = datax.val(input).substring(min, max);\r\n\r\n        return range;\r\n\r\n    };\r\n\r\n     /**\r\n     * Sets the selected text range of (i.e., highlights text in) the given input.\r\n     * @param {HTMLInputElement|HTMLTextAreaElement} input input or textarea element\r\n     * @param {Number} startPos Zero-based index\r\n     * @param {Number} endPos Zero-based index\r\n     */\r\n    function setInputRange(input, startPos, endPos) {\r\n        startPos = _normalizePos(input, startPos);\r\n        endPos = _normalizePos(input, endPos);\r\n\r\n        // Mozilla, et al.\r\n        input.setSelectionRange(startPos, endPos);\r\n\r\n        return this;\r\n   };\r\n\r\n    /**\r\n     * Replaces the currently selected text with the given string.\r\n     * @param {HTMLInputElement|HTMLTextAreaElement} input input or textarea element\r\n     * @param {String} text New text that will replace the currently selected text.\r\n     * @see http://parentnode.org/javascript/working-with-the-cursor-position/\r\n     */\r\n    function replaceInputRange(input, text) {\r\n        var oldValue = datax.val(input);\r\n        var selection = getInputRange(input);\r\n\r\n        var newLength = +(selection.start + text.length + (oldValue.length - selection.end));\r\n        var maxLength = +datax.attr(input,'maxlength');\r\n\r\n        if(maxLength && newLength > maxLength) {\r\n            var delta = text.length - (newLength - maxLength);\r\n            text = text.substr(0, delta);\r\n        }\r\n\r\n        // Now that we know what the user selected, we can replace it\r\n        var startText = oldValue.substr(0, selection.start);\r\n        var endText = oldValue.substr(selection.end);\r\n\r\n        datax.val(input,startText + text + endText);\r\n\r\n        // Reset the selection\r\n        var startPos = selection.start;\r\n        var endPos = startPos + text.length;\r\n\r\n        setInputRange(input, selection.length ? startPos : endPos, endPos);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Select all text in the given element.\r\n     * @param {HTMLElement} elem Any block or inline element other than a form element.\r\n     */\r\n    function selectAll(elem) {\r\n        if (elem.select) {\r\n            elem.select();\r\n            return this;\r\n        }\r\n\r\n        var selection = window.getSelection();\r\n        var range = document.createRange();\r\n        range.selectNodeContents(elem);\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n        return this;\r\n\r\n    }\r\n\r\n    function deselectAll() {\r\n        if (document.selection) {\r\n            document.selection.empty();\r\n        }\r\n        else if (window.getSelection) {\r\n            window.getSelection().removeAllRanges();\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    function caret(input,arg1) {\r\n        // getCaret()\r\n        if (arg1 === undefined) {\r\n            return getCaret(input);\r\n        }\r\n        // setCaret(position)\r\n        else if (typeof arg1 === 'number') {\r\n            setCaret(input, arg1);\r\n        }\r\n        // insertAtCaret(text)\r\n        else {\r\n            insertAtCaret(input, arg1);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function range(input, arg1,arg2) {\r\n        // getRange() = { start: pos, end: pos }\r\n        if (arg1 === undefined) {\r\n            return getInputRange(input);\r\n        }\r\n        // setRange(startPos, endPos)\r\n        else if (typeof arg1 === 'number') {\r\n            var startPos = arg1;\r\n            var endPos = arg2;\r\n            setInputRange(input, startPos, endPos);\r\n        }\r\n        // replaceRange(text)\r\n        else {\r\n            var text = arg1;\r\n            replaceInputRange(input, text);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function carets() {\r\n        return carets;\r\n    }\r\n\r\n    langx.mixin(carets,{\r\n        getCaret,\r\n        setCaret,\r\n        insertAtCaret,\r\n        getInputRange,\r\n        setInputRange,\r\n        replaceInputRange,\r\n        selectAll,\r\n        deselectAll,\r\n        caret,\r\n        range\r\n\r\n    });\r\n    return skylark.attach(\"domx.carets\", carets);\r\n});\ndefine('skylark-domx-carets/main',[\r\n    \"skylark-langx/langx\",\r\n    \"./carets\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\",        \r\n    \"skylark-domx-eventer\"        \r\n],function(langx,carets,velm,$){\r\n\r\n    velm.delegate([\r\n        \"caret\",\r\n        \"insertAtCaret\",\r\n        \"range\",\r\n        \"selectAll\"\r\n    ], carets);\r\n\r\n    $.fn.caret = $.wraps.wrapper_value(carets.caret, carets, carets.caret);\r\n    $.fn.range = $.wraps.wrapper_value(carets.range, carets, carets.range);\r\n\r\n\r\n\treturn carets;\r\n});\ndefine('skylark-domx-carets', ['skylark-domx-carets/main'], function (main) { return main; });\n\n"]}